/**
* Problem 12 - Highly divisible triangular number
* @see {@link https://projecteuler.net/problem=12}
*
* The sequence of triangle numbers is generated by adding the natural numbers.
* So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
* The first ten terms would be:
*
* 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
*
* Let us list the factors of the first seven triangle numbers:
*
*  1: 1
*  3: 1,3
*  6: 1,2,3,6
* 10: 1,2,5,10
* 15: 1,3,5,15
* 21: 1,3,7,21
* 28: 1,2,4,7,14,28
*
* We can see that 28 is the first triangle number to have over five divisors.
* What is the value of the first triangle number to have over five hundred divisors?
*
* @author ddaniel27
 */
package problem12

func Problem12(limit uint) uint {
	triangle := uint(0)
	for i := uint(1); ; i++ {
		triangle += i
		if numDivisors(triangle) >= limit {
			return triangle
		}
	}
}

func numDivisors(n uint) uint {
	divisors := uint(0)
	for i := uint(1); i*i <= n; i++ {
		if n%i == 0 {
			divisors += 2
		}
	}
	return divisors
}
